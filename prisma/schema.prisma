// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  fullName         String
  username         String         @unique
  phoneNumber      String         @unique
  email            String         @unique
  password         String
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isVerified       Boolean        @default(false)
  role             Role           @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  refreshTokens    RefreshToken[]
  profile          UserProfile?
  children         Child[]
  bookings         Booking[]
}

model UserProfile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  address          String?
  city             String?
  state            String?
  zipCode          String?
  highestEducation String?
  areaOfInterest   String?
  relationToChild  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  name      String
  age       Int
  gender    Gender
  className String

  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)

  replacedById   Int?
  replacedBy     RefreshToken?  @relation("ReplacedBy", fields: [replacedById], references: [id])
  replacedTokens RefreshToken[] @relation("ReplacedBy")

  parentTokenId Int?
  parentToken   RefreshToken?  @relation("ParentToken", fields: [parentTokenId], references: [id])
  childTokens   RefreshToken[] @relation("ParentToken")
}

model Seminar {
  id          String        @id @default(uuid())
  title       String
  description String
  date        DateTime
  time        String // stored as string (e.g., "10:30 AM")
  duration    Int // in minutes
  location    String
  price       Decimal
  capacity    Int
  status      SeminarStatus @default(UPCOMING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  bookings Booking[]
}

enum SeminarStatus {
  ONGOING
  UPCOMING
  COMPLETED
}

model Booking {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  seminar    Seminar  @relation(fields: [seminarId], references: [id])
  seminarId  String
  quantity   Int      @default(1)
  totalPrice Decimal
  status     BookingStatus @default(PENDING)
  createdAt  DateTime @default(now())
  tickets    Ticket[]

  razorpayPaymentId String?
  razorpayOrderId   String?
}

model Ticket {
  id        String   @id @default(cuid())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  ticketCode String  @unique
  createdAt DateTime @default(now())
}

enum BookingStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}



model Inquiry {
  id             String   @id @default(cuid())
  fullName       String
  email          String
  phoneNumber    String
  inquiryType    String
  subject        String
  message        String
  status         InquiryStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}
