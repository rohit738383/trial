generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  username         String         @unique
  phoneNumber      String         @unique
  email            String         @unique
  password         String
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isVerified       Boolean        @default(false)
  role             Role           @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  fullName         String
  bookings         Booking[]
  children         Child[]
  refreshTokens    RefreshToken[]
  profile          UserProfile?
}

model UserProfile {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  address          String?
  city             String?
  state            String?
  zipCode          String?
  highestEducation String?
  relationToChild  String?
  counterpartnerName        String?  
  counterpartnerPhoneNumber String?
  counterpartnerEducation   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model Child {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  age       Int
  className String
  createdAt DateTime @default(now())
  gender    Gender
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id             Int            @id @default(autoincrement())
  token          String         @unique
  userId         Int
  expiresAt      DateTime
  createdAt      DateTime       @default(now())
  revoked        Boolean        @default(false)
  replacedById   Int?
  parentTokenId  Int?
  parentToken    RefreshToken?  @relation("ParentToken", fields: [parentTokenId], references: [id])
  childTokens    RefreshToken[] @relation("ParentToken")
  replacedBy     RefreshToken?  @relation("ReplacedBy", fields: [replacedById], references: [id])
  replacedTokens RefreshToken[] @relation("ReplacedBy")
  user           User           @relation(fields: [userId], references: [id])
}

model Seminar {
  id          String        @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  capacity    Int
  duration    Int
  price       Decimal
  status      SeminarStatus @default(UPCOMING)
  time        String
  bookings    Booking[]
}

model Booking {
  id                String        @id @default(cuid())
  userId            Int
  seminarId         String
  createdAt         DateTime      @default(now())
  quantity          Int           @default(1)
  razorpayOrderId   String?
  razorpayPaymentId String?
  status            BookingStatus @default(PENDING)
  totalPrice        Decimal
  paymentMethod     String?
  seminar           Seminar       @relation(fields: [seminarId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
  tickets           Ticket[]
}

model Ticket {
  id         String   @id @default(cuid())
  bookingId  String
  ticketCode String   @unique
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
}

model Inquiry {
  id          String        @id @default(uuid())
  fullName    String
  email       String
  phoneNumber String
  inquiryType String
  subject     String
  message     String
  status      InquiryStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SeminarStatus {
  ONGOING
  UPCOMING
  COMPLETED
}

enum BookingStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}
